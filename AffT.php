<?php
/*
 * Copyright (c) 2022 Guillaume Outters
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * Affichage en mode texte.
 * Repose sur les s√©quences d'√©chappement ANSI pour faire du pseudo-curses.
 */
class AffT
{
	public function __construct($sortie = null)
	{
		$this->_sortie = $sortie;
		$this->m√†jDims();
		// On suppose le curseur √™tre sur une ligne "√† nous".
		$this->nl = 1;
	}
	
	public function m√†jDims()
	{
		// Nombre de lignes de l'√©cran, nombre de colonnes.
		// https://stackoverflow.com/questions/2203437
		$this->_nlaff = exec('tput lines');
		$this->_ncaff = exec('tput cols');
	}
	
	/**
	 * Affiche une ligne √† un endroit pr√©cis.
	 */
	public function affl($numL, $texte, $fin = null)
	{
		/* D√©placement */
		
		if($numL === null)
			$numL = isset($this->y) ? $this->nl : 0;
		isset($this->y) || $this->y = 0;
		
		// Faut-il rajouter des lignes?
		if($numL >= $this->nl)
		{
			// On va √† la derni√®re ligne "existante".
			if($this->y < $this->nl - 1)
				$this->_sortir('['.($this->nl - 1 - $this->y).'B');
			// Et sur sa derni√®re colonne.
			$this->_sortir('['.$this->_ncaff.'G');
			$this->_sortir(str_repeat("\n", $numL + 1 - $this->nl));
			$this->y = $numL;
			$this->nl = $numL + 1;
		}
		
		// Inutile de tenter d'√©crire sur une ligne hors √©cran, le terminal refusera d'y aller et √ßa nous cassera tous nos rep√®res.
		if($numL < $this->nl - $this->_nlaff)
			return;
			
		$this->_sortir("\r");
		if(($d√©pl = $numL - $this->y))
			$this->_sortir('['.($d√©pl < 0 ? -$d√©pl.'A' : $d√©pl.'B'));
		
		/* Protection */
		
		if(($pos = strpos($texte, "\n")) !== false)
		{
			$d√©passement = substr($texte, $pos + 1);
			$texte = substr($texte, 0, $pos);
		}
		
		/* D√©coupe */
		
		$tailleDispo = $this->_ncaff;
		if($fin) $tailleDispo -= $this->tailleAff($fin);
		$aff = $this->cha√ÆneBorn√©e($texte, $tailleDispo);
		if($fin) $aff .= $fin;
		
		$this->_sortir($aff);
		
		$this->y = $numL;
		
		/* Casseroles */
		
		if(isset($d√©passement))
			$this->affl($numL + 1, $d√©passement);
	}
	
	public function cha√ÆneBorn√©e($cha√Æne, $tailleMax)
	{
		list($t, $d, $p) = $this->tailleAff($cha√Æne, true);
		if($t <= $tailleMax)
			return $cha√Æne;
		
		$rempl = '[‚Ä¶]';
		$tailleMax -= mb_strlen($rempl);
		
		// Partant de la fin, on retire les bouts jusqu'√† tenir sous $tailleMax (qui a encore r√©duit pour caser des points de suspension).
		$i = count($d);
		if($i % 2) ++$i;
		while(($i -= 2) >= 0)
		{
			if(($t -= $p[$i]) <= $tailleMax)
			{
				$d[$i] = $t == $tailleMax ? '' : mb_substr($d[$i], 0, $tailleMax - $t);
				$d[$i] .= $rempl;
				break;
			}
			unset($d[$i]);
		}
		
		return implode('', $d);
	}
	
	public function tailleAff($cha√Æne, $d√©tail = false)
	{
		$t = 0;
		if($d√©tail) $positions = array();
		for($d = $this->d√©coupe($cha√Æne), $n = count($d), $i = -2; ($i += 2) < $n;)
		{
			$t += ($ti = mb_strlen($d[$i]));
			if($d√©tail)
			{
				$positions[] = $ti;
				$positions[] = 0; // La prochaine cha√Æne est n√©cessairement cha√Æne de contr√¥le, de taille 0.
			}
		}
		return $d√©tail ? array($t, $d, $positions) : $t;
	}
	
	/**
	 * D√©coupe une cha√Æne en alternance de segments de texte et de caract√®res de contr√¥le.
	 *
	 * @return array [ 'texte', 's√©quence de contr√¥le', 'texte', etc. ]
	 *               N.B.: commence toujours par un texte (vide si besoin). Les indices pairs d√©signent donc les textes.
	 */
	public function d√©coupe($cha√Æne)
	{
		$r = array();
		preg_match_all('#\[[0-9;]*[a-zA-Z]#', $cha√Æne, $contr√¥les, PREG_OFFSET_CAPTURE);
		$pos = 0;
		foreach($contr√¥les[0] as $contr√¥le)
		{
			$r[] = substr($cha√Æne, $pos, $contr√¥le[1] - $pos);
			$r[] = $contr√¥le[0];
			$pos = $contr√¥le[1] + strlen($contr√¥le[0]);
		}
		if(strlen($fin = substr($cha√Æne, $pos)))
			$r[] = $fin;
		return $r;
	}
	
	protected function _sortir($cha√Æne)
	{
		if(isset($this->_sortie))
			fprintf($this->_sortie, '%s', $cha√Æne);
		else
		echo $cha√Æne;
	}
}

?>
